//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IRecordsService")]
    public interface IRecordsService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordsService/checkName", ReplyAction="http://tempuri.org/IRecordsService/checkNameResponse")]
        bool checkName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordsService/checkName", ReplyAction="http://tempuri.org/IRecordsService/checkNameResponse")]
        System.Threading.Tasks.Task<bool> checkNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordsService/ageCalc", ReplyAction="http://tempuri.org/IRecordsService/ageCalcResponse")]
        int ageCalc(string birthDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordsService/ageCalc", ReplyAction="http://tempuri.org/IRecordsService/ageCalcResponse")]
        System.Threading.Tasks.Task<int> ageCalcAsync(string birthDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordsService/getAge", ReplyAction="http://tempuri.org/IRecordsService/getAgeResponse")]
        int getAge();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecordsService/getAge", ReplyAction="http://tempuri.org/IRecordsService/getAgeResponse")]
        System.Threading.Tasks.Task<int> getAgeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface IRecordsServiceChannel : ServiceReference1.IRecordsService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class RecordsServiceClient : System.ServiceModel.ClientBase<ServiceReference1.IRecordsService>, ServiceReference1.IRecordsService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public RecordsServiceClient() : 
                base(RecordsServiceClient.GetDefaultBinding(), RecordsServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IRecordsService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RecordsServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(RecordsServiceClient.GetBindingForEndpoint(endpointConfiguration), RecordsServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RecordsServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(RecordsServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RecordsServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(RecordsServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RecordsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public bool checkName(string name)
        {
            return base.Channel.checkName(name);
        }
        
        public System.Threading.Tasks.Task<bool> checkNameAsync(string name)
        {
            return base.Channel.checkNameAsync(name);
        }
        
        public int ageCalc(string birthDate)
        {
            return base.Channel.ageCalc(birthDate);
        }
        
        public System.Threading.Tasks.Task<int> ageCalcAsync(string birthDate)
        {
            return base.Channel.ageCalcAsync(birthDate);
        }
        
        public int getAge()
        {
            return base.Channel.getAge();
        }
        
        public System.Threading.Tasks.Task<int> getAgeAsync()
        {
            return base.Channel.getAgeAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IRecordsService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IRecordsService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:55151/Service1.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return RecordsServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IRecordsService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return RecordsServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IRecordsService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IRecordsService,
        }
    }
}
